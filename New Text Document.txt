import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Generate random data
np.random.seed(42)

n_samples = 1000

# Generate random location data
cities = ['City A', 'City B', 'City C', 'City D']
latitude = np.random.uniform(low=35.0, high=45.0, size=n_samples)
longitude = np.random.uniform(low=-95.0, high=-85.0, size=n_samples)
locations = np.random.choice(cities, size=n_samples)

# Generate random time data
hours = np.random.randint(low=0, high=24, size=n_samples)
days_of_week = np.random.randint(low=0, high=7, size=n_samples)

# Generate random crime types
crime_types = ['Theft', 'Assault', 'Burglary', 'Robbery', 'Vandalism']
types = np.random.choice(crime_types, size=n_samples)

# Generate random weather data
weather_conditions = ['Sunny', 'Rainy', 'Cloudy']
weather = np.random.choice(weather_conditions, size=n_samples)

# Create a dataframe
data = pd.DataFrame({
    'Location': locations,
    'Latitude': latitude,
    'Longitude': longitude,
    'Hour': hours,
    'DayOfWeek': days_of_week,
    'Type': types,
    'Weather': weather
})

# Define the features and target variable
features = ['Location', 'Latitude', 'Longitude', 'Hour', 'DayOfWeek', 'Weather']
target = 'Type'

# Split the data into training and testing sets
train_data, test_data, train_target, test_target = train_test_split(
    data[features], data[target], test_size=0.2, random_state=42
)

# Train a Random Forest Classifier
model = RandomForestClassifier(random_state=42)
model.fit(train_data, train_target)

# Make predictions on the test set
predictions = model.predict(test_data)

# Evaluate the model
accuracy = accuracy_score(test_target, predictions)
print(f"Accuracy: {accuracy}")
